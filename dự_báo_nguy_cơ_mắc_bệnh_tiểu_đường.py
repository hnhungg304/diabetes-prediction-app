# -*- coding: utf-8 -*-
"""DỰ_BÁO_NGUY_CƠ_MẮC_BỆNH_TIỂU_ĐƯỜNG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BR2Qqfyf40gI6INRj1yXFOC99seMSElK
"""

#Bước 1: Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

#Bước 2: Tải và đọc dữ liệu
import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/BTL AI/diabetes_dataset.csv')
data.head()

import matplotlib.pyplot as plt
import seaborn as sns

#Bước 3: Kiểm tra dữ liệu
print("Kích thước dữ liệu:", data.shape)
print("\nThông tin về dữ liệu:")
print(data.info())
print("\nThống kê mô tả:")
print(data.describe())

#Bước 4: Xử lý dữ liệu
# Kiểm tra và xử lý giá trị thiếu
print("Số lượng giá trị thiếu trong mỗi cột:")
print(data.isnull().sum())

# Loại bỏ các dòng chứa giá trị thiếu
data = data.dropna()

# Kiểm tra lại kích thước sau khi xử lý
print("Kích thước dữ liệu sau khi xử lý:", data.shape)

"""2. Phân chia dữ liệu thành train và test"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score, confusion_matrix

# Chia biến X và Y
X = data.drop('Output', axis=1)
Y = data['Output']

# Chia tập dữ liệu thành train và test
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42, stratify=Y)
X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=42, stratify=Y_train) # SAU CHỈNH SỬA

print("\nKích thước tập huấn luyện:", X_train.shape)
print("Kích thước tập kiểm tra:", X_test.shape)

"""3. Huấn luyện mô hình RandomForest"""

# Khởi tạo mô hình
model = RandomForestClassifier(random_state=42,
    n_estimators=100,          # Giảm số lượng cây
    max_depth=5,               # Giới hạn độ sâu của cây
    min_samples_split=10,      # Số mẫu tối thiểu để chia node
    min_samples_leaf=5,        # Số mẫu tối thiểu ở mỗi node lá
    max_features='sqrt',       # Số lượng đặc trưng xem xét khi chia node
    class_weight='balanced'    # Cân bằng trọng số giữa các lớp
    )
model.fit(X_train, Y_train)

# Dự đoán và đánh giá trên tập test
Y_pred = model.predict(X_test)
Y_proba = model.predict_proba(X_test)[:, 1] # Dự đoán xác suất

# Độ chính xác của mô hình
acc = accuracy_score(Y_test, Y_pred)
print(f"\nAccuracy: {acc:.4f}")

# Báo cáo phân loại
print("\nBáo cáo phân loại:")
print(classification_report(Y_test, Y_pred))

# ROC AUC Score
roc_auc = roc_auc_score(Y_test, Y_proba)
print(f"ROC AUC Score: {roc_auc:.4f}")

# Ma trận nhầm lẫn
print("\nMa trận nhầm lẫn:")
print(confusion_matrix(Y_test, Y_pred))

# Evaluate on the training set as well
Y_train_pred = model.predict(X_train)

# Calculate accuracy on the training set
acc_train = accuracy_score(Y_train, Y_train_pred)
print(f"\nAccuracy on training set: {acc_train:.4f}")

# Compare training and test accuracy
if acc_train > acc:
    print("\nMô hình có thể bị overfitting: Độ chính xác trên tập huấn luyện cao hơn đáng kể so với tập kiểm tra.")
    print("Đây là loại overfitting.")
elif acc_train < acc:
     print("\nMô hình có thể bị underfitting: Độ chính xác trên cả tập huấn luyện và tập kiểm tra đều thấp.")
     print("Đây là loại underfitting.")
else:
    print("\nMô hình có vẻ không bị overfitting hoặc underfitting đáng kể.")
    print("Đây là loại phù hợp (good fit).")

"""4. Lưu mô hình"""

import joblib

# Lưu mô hình
joblib.dump(model, '/content/drive/MyDrive/random_forest_diabetes_model.joblib')

# Tải mô hình
loaded_model = joblib.load('/content/drive/MyDrive/random_forest_diabetes_model.joblib')